{"global_id":"udiv128__u128_mulhi","cdg":"{\"nodes\":[42069,0,1,2,3,4,5,6,7,8,9,10,11,12,13],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[0,1,1],[0,2,1],[0,3,1],[0,4,1],[0,5,1],[0,6,1],[0,7,1],[0,8,1],[0,9,1],[0,10,1],[0,11,1],[0,12,1],[0,13,1],[0,14,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"1\" ]\n    3 [ label = \"2\" ]\n    4 [ label = \"3\" ]\n    5 [ label = \"4\" ]\n    6 [ label = \"5\" ]\n    7 [ label = \"6\" ]\n    8 [ label = \"7\" ]\n    9 [ label = \"8\" ]\n    10 [ label = \"9\" ]\n    11 [ label = \"10\" ]\n    12 [ label = \"11\" ]\n    13 [ label = \"12\" ]\n    14 [ label = \"13\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    0 -> 3 [ label = \"1\" ]\n    0 -> 4 [ label = \"1\" ]\n    0 -> 5 [ label = \"1\" ]\n    0 -> 6 [ label = \"1\" ]\n    0 -> 7 [ label = \"1\" ]\n    0 -> 8 [ label = \"1\" ]\n    0 -> 9 [ label = \"1\" ]\n    0 -> 10 [ label = \"1\" ]\n    0 -> 11 [ label = \"1\" ]\n    0 -> 12 [ label = \"1\" ]\n    0 -> 13 [ label = \"1\" ]\n    0 -> 14 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"2\" ]\n    3 [ label = \"3\" ]\n    4 [ label = \"4\" ]\n    5 [ label = \"5\" ]\n    6 [ label = \"6\" ]\n    7 [ label = \"7\" ]\n    8 [ label = \"8\" ]\n    9 [ label = \"9\" ]\n    10 [ label = \"10\" ]\n    11 [ label = \"11\" ]\n    12 [ label = \"12\" ]\n    13 [ label = \"13\" ]\n    14 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    1 -> 2 [ label = \"1\" ]\n    2 -> 3 [ label = \"1\" ]\n    3 -> 4 [ label = \"1\" ]\n    4 -> 5 [ label = \"1\" ]\n    5 -> 6 [ label = \"1\" ]\n    6 -> 7 [ label = \"1\" ]\n    7 -> 8 [ label = \"1\" ]\n    8 -> 9 [ label = \"1\" ]\n    9 -> 10 [ label = \"1\" ]\n    10 -> 11 [ label = \"1\" ]\n    11 -> 12 [ label = \"1\" ]\n    12 -> 13 [ label = \"1\" ]\n    13 -> 14 [ label = \"1\" ]\n}\n","truncated_cfg":"digraph {\n    0 [ label = \"0\" ]\n    1 [ label = \"1\" ]\n    2 [ label = \"2\" ]\n    3 [ label = \"3\" ]\n    4 [ label = \"4\" ]\n    5 [ label = \"5\" ]\n    6 [ label = \"6\" ]\n    7 [ label = \"7\" ]\n    8 [ label = \"8\" ]\n    9 [ label = \"9\" ]\n    10 [ label = \"10\" ]\n    11 [ label = \"11\" ]\n    12 [ label = \"12\" ]\n    13 [ label = \"13\" ]\n    14 [ label = \"42069\" ]\n    0 -> 1 [ label = \"1\" ]\n    1 -> 2 [ label = \"1\" ]\n    2 -> 3 [ label = \"1\" ]\n    3 -> 4 [ label = \"1\" ]\n    4 -> 5 [ label = \"1\" ]\n    5 -> 6 [ label = \"1\" ]\n    6 -> 7 [ label = \"1\" ]\n    7 -> 8 [ label = \"1\" ]\n    8 -> 9 [ label = \"1\" ]\n    9 -> 10 [ label = \"1\" ]\n    10 -> 11 [ label = \"1\" ]\n    11 -> 12 [ label = \"1\" ]\n    12 -> 13 [ label = \"1\" ]\n    13 -> 14 [ label = \"1\" ]\n}\n","constant_pool":[{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"128","ty":{"Prim":{"Uint":"U32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"128","ty":{"Prim":{"Uint":"U32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"128","ty":{"Prim":{"Uint":"U32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"128","ty":{"Prim":{"Uint":"U32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}},{"val":"128","ty":{"Prim":{"Uint":"U32"}}},{"val":"64","ty":{"Prim":{"Int":"I32"}}}],"branches":0,"assertions":13,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:7:36: 7:40 (#0), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:7:15: 7:16 (#0), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:7:24: 7:25 (#0), scope: scope[0] } }","_3 -> LocalDecl { mutability: Not, local_info: Clear, ty: u64, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:8:9: 8:13 (#0), scope: scope[0] } }","_4 -> LocalDecl { mutability: Not, local_info: Clear, ty: u64, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:9:9: 9:13 (#0), scope: scope[1] } }","_5 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:9:16: 9:25 (#0), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:9:16: 9:25 (#0), scope: scope[0] } }","_7 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:9:16: 9:25 (#0), scope: scope[0] } }","_8 -> LocalDecl { mutability: Not, local_info: Clear, ty: u64, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:10:9: 10:13 (#0), scope: scope[2] } }","_9 -> LocalDecl { mutability: Not, local_info: Clear, ty: u64, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:11:9: 11:13 (#0), scope: scope[3] } }","_10 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:11:16: 11:25 (#0), scope: scope[0] } }","_11 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:11:16: 11:25 (#0), scope: scope[0] } }","_12 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:11:16: 11:25 (#0), scope: scope[0] } }","_13 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:14:9: 14:14 (#0), scope: scope[4] } }","_14 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:14:17: 14:46 (#0), scope: scope[0] } }","_15 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:14:18: 14:30 (#0), scope: scope[0] } }","_16 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:14:33: 14:45 (#0), scope: scope[0] } }","_17 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:14:17: 14:46 (#0), scope: scope[0] } }","_18 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:14:17: 14:52 (#0), scope: scope[0] } }","_19 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:14:17: 14:52 (#0), scope: scope[0] } }","_20 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:15:9: 15:10 (#0), scope: scope[5] } }","_21 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:15:13: 15:40 (#0), scope: scope[0] } }","_22 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:15:13: 15:25 (#0), scope: scope[0] } }","_23 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:15:28: 15:40 (#0), scope: scope[0] } }","_24 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:15:13: 15:40 (#0), scope: scope[0] } }","_25 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:15:13: 15:48 (#0), scope: scope[0] } }","_26 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:16:9: 16:14 (#0), scope: scope[6] } }","_27 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:16:17: 16:24 (#0), scope: scope[0] } }","_28 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:16:17: 16:24 (#0), scope: scope[0] } }","_29 -> LocalDecl { mutability: Not, local_info: Clear, ty: u64, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:18:9: 18:13 (#0), scope: scope[7] } }","_30 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:9: 19:14 (#0), scope: scope[8] } }","_31 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:17: 19:61 (#0), scope: scope[0] } }","_32 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:18: 19:45 (#0), scope: scope[0] } }","_33 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:18: 19:30 (#0), scope: scope[0] } }","_34 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:33: 19:45 (#0), scope: scope[0] } }","_35 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:18: 19:45 (#0), scope: scope[0] } }","_36 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:48: 19:60 (#0), scope: scope[0] } }","_37 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:17: 19:61 (#0), scope: scope[0] } }","_38 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:17: 19:67 (#0), scope: scope[0] } }","_39 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:19:17: 19:67 (#0), scope: scope[0] } }","_40 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:40 (#0), scope: scope[0] } }","_41 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:32 (#0), scope: scope[0] } }","_42 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:17 (#0), scope: scope[0] } }","_43 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:21:20: 21:32 (#0), scope: scope[0] } }","_44 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:32 (#0), scope: scope[0] } }","_45 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:40 (#0), scope: scope[0] } }","_46 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, bool), user_ty: None, source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:48 (#0), scope: scope[0] } }"],"basic_blocks":["0 -> Some(BasicBlockData { statements: [_3 = _1 as u64 (IntToInt), _6 = const 64_i32 as u32 (IntToInt), _7 = Lt(move _6, const 128_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:9:16: 9:25 (#0), scope: scope[1] }, kind: assert(move _7, \"attempt to shift right by `{}`, which would overflow\", const 64_i32) -> [success: bb1, unwind unreachable] }), is_cleanup: false })","1 -> Some(BasicBlockData { statements: [_5 = Shr(_1, const 64_i32), _4 = move _5 as u64 (IntToInt), _8 = _2 as u64 (IntToInt), _11 = const 64_i32 as u32 (IntToInt), _12 = Lt(move _11, const 128_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:11:16: 11:25 (#0), scope: scope[3] }, kind: assert(move _12, \"attempt to shift right by `{}`, which would overflow\", const 64_i32) -> [success: bb2, unwind unreachable] }), is_cleanup: false })","2 -> Some(BasicBlockData { statements: [_10 = Shr(_2, const 64_i32), _9 = move _10 as u64 (IntToInt), _15 = _3 as u128 (IntToInt), _16 = _8 as u128 (IntToInt), _17 = MulWithOverflow(_15, _16)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:14:17: 14:46 (#0), scope: scope[4] }, kind: assert(!move (_17.1: bool), \"attempt to compute `{} * {}`, which would overflow\", move _15, move _16) -> [success: bb3, unwind unreachable] }), is_cleanup: false })","3 -> Some(BasicBlockData { statements: [_14 = move (_17.0: u128), _18 = const 64_i32 as u32 (IntToInt), _19 = Lt(move _18, const 128_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:14:17: 14:52 (#0), scope: scope[4] }, kind: assert(move _19, \"attempt to shift right by `{}`, which would overflow\", const 64_i32) -> [success: bb4, unwind unreachable] }), is_cleanup: false })","4 -> Some(BasicBlockData { statements: [_13 = Shr(move _14, const 64_i32), _22 = _3 as u128 (IntToInt), _23 = _9 as u128 (IntToInt), _24 = MulWithOverflow(_22, _23)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:15:13: 15:40 (#0), scope: scope[5] }, kind: assert(!move (_24.1: bool), \"attempt to compute `{} * {}`, which would overflow\", move _22, move _23) -> [success: bb5, unwind unreachable] }), is_cleanup: false })","5 -> Some(BasicBlockData { statements: [_21 = move (_24.0: u128), _25 = AddWithOverflow(_21, _13)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:15:13: 15:48 (#0), scope: scope[5] }, kind: assert(!move (_25.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _21, _13) -> [success: bb6, unwind unreachable] }), is_cleanup: false })","6 -> Some(BasicBlockData { statements: [_20 = move (_25.0: u128), _27 = const 64_i32 as u32 (IntToInt), _28 = Lt(move _27, const 128_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:16:17: 16:24 (#0), scope: scope[6] }, kind: assert(move _28, \"attempt to shift right by `{}`, which would overflow\", const 64_i32) -> [success: bb7, unwind unreachable] }), is_cleanup: false })","7 -> Some(BasicBlockData { statements: [_26 = Shr(_20, const 64_i32), _29 = _20 as u64 (IntToInt), _33 = _4 as u128 (IntToInt), _34 = _8 as u128 (IntToInt), _35 = MulWithOverflow(_33, _34)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:19:18: 19:45 (#0), scope: scope[8] }, kind: assert(!move (_35.1: bool), \"attempt to compute `{} * {}`, which would overflow\", move _33, move _34) -> [success: bb8, unwind unreachable] }), is_cleanup: false })","8 -> Some(BasicBlockData { statements: [_32 = move (_35.0: u128), _36 = _29 as u128 (IntToInt), _37 = AddWithOverflow(_32, _36)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:19:17: 19:61 (#0), scope: scope[8] }, kind: assert(!move (_37.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _32, move _36) -> [success: bb9, unwind unreachable] }), is_cleanup: false })","9 -> Some(BasicBlockData { statements: [_31 = move (_37.0: u128), _38 = const 64_i32 as u32 (IntToInt), _39 = Lt(move _38, const 128_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:19:17: 19:67 (#0), scope: scope[8] }, kind: assert(move _39, \"attempt to shift right by `{}`, which would overflow\", const 64_i32) -> [success: bb10, unwind unreachable] }), is_cleanup: false })","10 -> Some(BasicBlockData { statements: [_30 = Shr(move _31, const 64_i32), _42 = _4 as u128 (IntToInt), _43 = _9 as u128 (IntToInt), _44 = MulWithOverflow(_42, _43)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:32 (#0), scope: scope[9] }, kind: assert(!move (_44.1: bool), \"attempt to compute `{} * {}`, which would overflow\", move _42, move _43) -> [success: bb11, unwind unreachable] }), is_cleanup: false })","11 -> Some(BasicBlockData { statements: [_41 = move (_44.0: u128), _45 = AddWithOverflow(_41, _26)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:40 (#0), scope: scope[9] }, kind: assert(!move (_45.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _41, _26) -> [success: bb12, unwind unreachable] }), is_cleanup: false })","12 -> Some(BasicBlockData { statements: [_40 = move (_45.0: u128), _46 = AddWithOverflow(_40, _30)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:21:5: 21:48 (#0), scope: scope[9] }, kind: assert(!move (_46.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _40, _30) -> [success: bb13, unwind unreachable] }), is_cleanup: false })","13 -> Some(BasicBlockData { statements: [_0 = move (_46.0: u128)], terminator: Some(Terminator { source_info: SourceInfo { span: src/udiv128.rs:22:2: 22:2 (#0), scope: scope[0] }, kind: return }), is_cleanup: false })"]}