{"global_id":"<impl private__Sealed for u16>__write","cdg":"{\"nodes\":[42069,0,2,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,34,35,36,37,29,30,31,32,38,39,40,41,3,4,42,43,44,45,46],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[4,5,1],[4,6,1],[4,7,1],[4,8,1],[4,9,1],[4,10,1],[4,11,1],[4,12,1],[4,13,1],[4,14,1],[4,15,1],[4,16,1],[4,17,1],[4,18,1],[19,20,1],[19,21,1],[19,22,1],[19,23,1],[19,24,1],[19,25,1],[19,26,1],[27,28,1],[27,29,1],[27,30,1],[27,31,1],[27,32,1],[27,33,1],[27,34,1],[27,35,1],[27,36,1],[37,38,1],[37,39,1],[37,40,1],[0,1,1],[0,41,1],[0,42,1],[0,4,1],[0,19,1],[0,27,1],[0,37,1],[0,43,1],[0,44,1],[0,45,1],[0,46,1],[0,47,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"2\" ]\n    3 [ label = \"1\" ]\n    4 [ label = \"5\" ]\n    5 [ label = \"6\" ]\n    6 [ label = \"7\" ]\n    7 [ label = \"8\" ]\n    8 [ label = \"9\" ]\n    9 [ label = \"10\" ]\n    10 [ label = \"11\" ]\n    11 [ label = \"12\" ]\n    12 [ label = \"13\" ]\n    13 [ label = \"14\" ]\n    14 [ label = \"15\" ]\n    15 [ label = \"16\" ]\n    16 [ label = \"17\" ]\n    17 [ label = \"18\" ]\n    18 [ label = \"19\" ]\n    19 [ label = \"20\" ]\n    20 [ label = \"21\" ]\n    21 [ label = \"22\" ]\n    22 [ label = \"23\" ]\n    23 [ label = \"24\" ]\n    24 [ label = \"25\" ]\n    25 [ label = \"26\" ]\n    26 [ label = \"27\" ]\n    27 [ label = \"28\" ]\n    28 [ label = \"33\" ]\n    29 [ label = \"34\" ]\n    30 [ label = \"35\" ]\n    31 [ label = \"36\" ]\n    32 [ label = \"37\" ]\n    33 [ label = \"29\" ]\n    34 [ label = \"30\" ]\n    35 [ label = \"31\" ]\n    36 [ label = \"32\" ]\n    37 [ label = \"38\" ]\n    38 [ label = \"39\" ]\n    39 [ label = \"40\" ]\n    40 [ label = \"41\" ]\n    41 [ label = \"3\" ]\n    42 [ label = \"4\" ]\n    43 [ label = \"42\" ]\n    44 [ label = \"43\" ]\n    45 [ label = \"44\" ]\n    46 [ label = \"45\" ]\n    47 [ label = \"46\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    4 -> 5 [ label = \"1\" ]\n    4 -> 6 [ label = \"1\" ]\n    4 -> 7 [ label = \"1\" ]\n    4 -> 8 [ label = \"1\" ]\n    4 -> 9 [ label = \"1\" ]\n    4 -> 10 [ label = \"1\" ]\n    4 -> 11 [ label = \"1\" ]\n    4 -> 12 [ label = \"1\" ]\n    4 -> 13 [ label = \"1\" ]\n    4 -> 14 [ label = \"1\" ]\n    4 -> 15 [ label = \"1\" ]\n    4 -> 16 [ label = \"1\" ]\n    4 -> 17 [ label = \"1\" ]\n    4 -> 18 [ label = \"1\" ]\n    19 -> 20 [ label = \"1\" ]\n    19 -> 21 [ label = \"1\" ]\n    19 -> 22 [ label = \"1\" ]\n    19 -> 23 [ label = \"1\" ]\n    19 -> 24 [ label = \"1\" ]\n    19 -> 25 [ label = \"1\" ]\n    19 -> 26 [ label = \"1\" ]\n    27 -> 28 [ label = \"1\" ]\n    27 -> 29 [ label = \"1\" ]\n    27 -> 30 [ label = \"1\" ]\n    27 -> 31 [ label = \"1\" ]\n    27 -> 32 [ label = \"1\" ]\n    27 -> 33 [ label = \"1\" ]\n    27 -> 34 [ label = \"1\" ]\n    27 -> 35 [ label = \"1\" ]\n    27 -> 36 [ label = \"1\" ]\n    37 -> 38 [ label = \"1\" ]\n    37 -> 39 [ label = \"1\" ]\n    37 -> 40 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 41 [ label = \"1\" ]\n    0 -> 42 [ label = \"1\" ]\n    0 -> 4 [ label = \"1\" ]\n    0 -> 19 [ label = \"1\" ]\n    0 -> 27 [ label = \"1\" ]\n    0 -> 37 [ label = \"1\" ]\n    0 -> 43 [ label = \"1\" ]\n    0 -> 44 [ label = \"1\" ]\n    0 -> 45 [ label = \"1\" ]\n    0 -> 46 [ label = \"1\" ]\n    0 -> 47 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"","truncated_cfg":"","constant_pool":[],"branches":0,"assertions":0,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} str, user_ty: None, source_info: SourceInfo { span: src/lib.rs:151:70: 151:74 (#56), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Clear, ty: u16, user_ty: None, source_info: SourceInfo { span: src/lib.rs:151:22: 151:26 (#56), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>; 5_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:151:28: 151:31 (#56), scope: scope[0] } }","_3 -> LocalDecl { mutability: Not, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:152:21: 152:35 (#56), scope: scope[0] } }","_4 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:153:21: 153:26 (#56), scope: scope[1] } }","_5 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:157:21: 157:49 (#56), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:157:23: 157:48 (#56), scope: scope[0] } }","_7 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:159:21: 159:29 (#56), scope: scope[2] } }","_8 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:159:32: 159:35 (#56), scope: scope[0] } }","_9 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>; 5_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:159:32: 159:35 (#56), scope: scope[0] } }","_10 -> LocalDecl { mutability: Not, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:160:21: 160:28 (#56), scope: scope[3] } }","_11 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut std::mem::MaybeUninit<u8>, user_ty: None, source_info: SourceInfo { span: src/lib.rs:160:31: 160:47 (#56), scope: scope[0] } }","_12 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:160:31: 160:34 (#56), scope: scope[0] } }","_13 -> LocalDecl { mutability: Not, local_info: Clear, ty: *const u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:161:21: 161:28 (#56), scope: scope[4] } }","_14 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [u8], user_ty: None, source_info: SourceInfo { span: src/lib.rs:161:31: 161:45 (#56), scope: scope[0] } }","_15 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [u8; 200_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:161:31: 161:45 (#56), scope: scope[0] } }","_16 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:164:23: 164:33 (#56), scope: scope[0] } }","_17 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:164:23: 164:24 (#56), scope: scope[0] } }","_18 -> LocalDecl { mutability: Not, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:165:25: 165:28 (#56), scope: scope[5] } }","_19 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:165:31: 165:32 (#56), scope: scope[0] } }","_20 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:165:31: 165:40 (#56), scope: scope[0] } }","_21 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:166:21: 166:31 (#56), scope: scope[0] } }","_22 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:168:25: 168:27 (#56), scope: scope[6] } }","_23 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:168:30: 168:48 (#56), scope: scope[0] } }","_24 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:168:31: 168:42 (#56), scope: scope[0] } }","_25 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:168:31: 168:42 (#56), scope: scope[0] } }","_26 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:168:30: 168:48 (#56), scope: scope[0] } }","_27 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:168:30: 168:48 (#56), scope: scope[0] } }","_28 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:169:25: 169:27 (#56), scope: scope[7] } }","_29 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:169:30: 169:48 (#56), scope: scope[0] } }","_30 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:169:31: 169:42 (#56), scope: scope[0] } }","_31 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:169:31: 169:42 (#56), scope: scope[0] } }","_32 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:169:30: 169:48 (#56), scope: scope[0] } }","_33 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:169:30: 169:48 (#56), scope: scope[0] } }","_34 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:170:21: 170:30 (#56), scope: scope[0] } }","_35 -> LocalDecl { mutability: Not, local_info: Clear, ty: (), user_ty: None, source_info: SourceInfo { span: src/lib.rs:172:25: 172:88 (#56), scope: scope[0] } }","_36 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *const u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:172:50: 172:65 (#56), scope: scope[0] } }","_37 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:172:67: 172:84 (#56), scope: scope[0] } }","_38 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:172:79: 172:83 (#56), scope: scope[0] } }","_39 -> LocalDecl { mutability: Not, local_info: Clear, ty: (), user_ty: None, source_info: SourceInfo { span: src/lib.rs:173:25: 173:92 (#56), scope: scope[0] } }","_40 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *const u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:173:50: 173:65 (#56), scope: scope[0] } }","_41 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:173:67: 173:88 (#56), scope: scope[0] } }","_42 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:173:79: 173:87 (#56), scope: scope[0] } }","_43 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:173:79: 173:83 (#56), scope: scope[0] } }","_44 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:173:79: 173:87 (#56), scope: scope[0] } }","_45 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:178:20: 178:28 (#56), scope: scope[0] } }","_46 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:178:20: 178:21 (#56), scope: scope[0] } }","_47 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:179:25: 179:27 (#56), scope: scope[5] } }","_48 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:179:30: 179:46 (#56), scope: scope[0] } }","_49 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:179:31: 179:40 (#56), scope: scope[0] } }","_50 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:179:32: 179:33 (#56), scope: scope[0] } }","_51 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:179:31: 179:40 (#56), scope: scope[0] } }","_52 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:179:30: 179:46 (#56), scope: scope[0] } }","_53 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:179:30: 179:46 (#56), scope: scope[0] } }","_54 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:180:21: 180:29 (#56), scope: scope[0] } }","_55 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:181:21: 181:30 (#56), scope: scope[0] } }","_56 -> LocalDecl { mutability: Not, local_info: Clear, ty: (), user_ty: None, source_info: SourceInfo { span: src/lib.rs:183:25: 183:88 (#56), scope: scope[0] } }","_57 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *const u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:183:50: 183:65 (#56), scope: scope[0] } }","_58 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:183:67: 183:84 (#56), scope: scope[0] } }","_59 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:183:79: 183:83 (#56), scope: scope[0] } }","_60 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:188:20: 188:26 (#56), scope: scope[0] } }","_61 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:188:20: 188:21 (#56), scope: scope[0] } }","_62 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:189:21: 189:30 (#56), scope: scope[0] } }","_63 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:191:46: 191:55 (#56), scope: scope[0] } }","_64 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:191:47: 191:48 (#56), scope: scope[0] } }","_65 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u8, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:191:46: 191:62 (#56), scope: scope[0] } }","_66 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:191:26: 191:43 (#56), scope: scope[0] } }","_67 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:191:38: 191:42 (#56), scope: scope[0] } }","_68 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:194:25: 194:27 (#56), scope: scope[5] } }","_69 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:194:30: 194:38 (#56), scope: scope[0] } }","_70 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:194:31: 194:32 (#56), scope: scope[0] } }","_71 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u32, user_ty: None, source_info: SourceInfo { span: src/lib.rs:194:30: 194:38 (#56), scope: scope[0] } }","_72 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:194:30: 194:38 (#56), scope: scope[0] } }","_73 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:195:21: 195:30 (#56), scope: scope[0] } }","_74 -> LocalDecl { mutability: Not, local_info: Clear, ty: (), user_ty: None, source_info: SourceInfo { span: src/lib.rs:197:25: 197:88 (#56), scope: scope[0] } }","_75 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *const u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:197:50: 197:65 (#56), scope: scope[0] } }","_76 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:197:67: 197:84 (#56), scope: scope[0] } }","_77 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:197:79: 197:83 (#56), scope: scope[0] } }","_78 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:202:21: 202:30 (#56), scope: scope[0] } }","_79 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:204:26: 204:43 (#56), scope: scope[0] } }","_80 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:204:38: 204:42 (#56), scope: scope[0] } }","_81 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:208:21: 208:24 (#56), scope: scope[5] } }","_82 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:208:27: 208:36 (#56), scope: scope[0] } }","_83 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:208:27: 208:30 (#56), scope: scope[0] } }","_84 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>; 5_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:208:27: 208:30 (#56), scope: scope[0] } }","_85 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:208:39: 208:43 (#56), scope: scope[0] } }","_86 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:208:27: 208:43 (#56), scope: scope[0] } }","_87 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} [u8], user_ty: None, source_info: SourceInfo { span: src/lib.rs:209:21: 209:26 (#56), scope: scope[11] } }","_88 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *const u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:209:60: 209:77 (#56), scope: scope[0] } }","_89 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:209:60: 209:77 (#56), scope: scope[0] } }","_90 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:209:72: 209:76 (#56), scope: scope[0] } }","_91 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_92 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_93 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_94 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_95 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_96 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_97 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_98 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_99 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_100 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_101 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_102 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_103 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_104 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_105 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_106 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_107 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_108 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_109 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_110 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_111 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_112 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_113 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_114 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_115 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_116 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_117 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_118 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_119 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_120 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_121 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_122 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_123 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_124 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_125 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_126 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_127 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_128 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_129 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_130 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_131 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_132 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_133 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_134 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_135 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_136 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_137 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_138 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_139 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_140 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_141 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_142 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: u16, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_143 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_144 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_145 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_146 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_147 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_148 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_149 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_150 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_151 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_152 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _152 = <ZST>: for<'a> fn(u64, &'a str) {rusty_monitor::trace_entry}(const 0_usize, const \"<impl private__Sealed for u16>__write\") -> [return: bb1, unwind continue] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_3 = Ge(_1, const 0_u16)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:153:32: 153:46 (#56), scope: scope[1] }, kind: switchInt(_3) -> [0: bb48, otherwise: bb50] }), is_cleanup: false }","2 -> BasicBlockData { statements: [_4 = _1 as u32 (IntToInt)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:153:29: 158:18 (#56), scope: scope[1] }, kind: goto -> bb52 }), is_cleanup: false }","3 -> BasicBlockData { statements: [_6 = _1 as u32 (IntToInt), _5 = Not(move _6)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:157:21: 157:65 (#56), scope: scope[1] }, kind: _4 = core::num::<impl u32>::wrapping_add(move _5, const 1_u32) -> [return: bb53, unwind unreachable] }), is_cleanup: false }","4 -> BasicBlockData { statements: [_9 = &(*_2), _8 = move _9 as &[std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize)), _7 = PtrMetadata(move _8), _12 = _2 as &mut [std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize))], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:160:31: 160:47 (#56), scope: scope[3] }, kind: _11 = core::slice::<impl [std::mem::MaybeUninit<u8>]>::as_mut_ptr(move _12) -> [return: bb54, unwind unreachable] }), is_cleanup: false }","5 -> BasicBlockData { statements: [_10 = move _11 as *mut u8 (PtrToPtr), _15 = const <impl private::Sealed for u16>::write::promoted[0], _14 = move _15 as &[u8] (PointerCoercion(Unsize))], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:161:31: 161:54 (#56), scope: scope[4] }, kind: _13 = core::slice::<impl [u8]>::as_ptr(move _14) -> [return: bb55, unwind unreachable] }), is_cleanup: false }","6 -> BasicBlockData { statements: [_17 = _4, _16 = Ge(move _17, const 10000_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:164:23: 164:33 (#56), scope: scope[5] }, kind: switchInt(move _16) -> [0: bb21, otherwise: bb7] }), is_cleanup: false }","7 -> BasicBlockData { statements: [_19 = _4, _20 = Eq(const 10000_u32, const 0_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:165:31: 165:40 (#56), scope: scope[5] }, kind: assert(!move _20, \"attempt to calculate the remainder of `{}` with a divisor of zero\", _19) -> [success: bb56, unwind unreachable] }), is_cleanup: false }","8 -> BasicBlockData { statements: [_18 = Rem(move _19, const 10000_u32), _21 = Eq(const 10000_u32, const 0_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:166:21: 166:31 (#56), scope: scope[6] }, kind: assert(!move _21, \"attempt to divide `{}` by zero\", _4) -> [success: bb57, unwind unreachable] }), is_cleanup: false }","9 -> BasicBlockData { statements: [_4 = Div(_4, const 10000_u32), _25 = Eq(const 100_u32, const 0_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:168:31: 168:42 (#56), scope: scope[6] }, kind: assert(!move _25, \"attempt to divide `{}` by zero\", _18) -> [success: bb58, unwind unreachable] }), is_cleanup: false }","10 -> BasicBlockData { statements: [_24 = Div(_18, const 100_u32), _26 = const 1_i32 as u32 (IntToInt), _27 = Lt(move _26, const 32_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:168:30: 168:48 (#56), scope: scope[6] }, kind: assert(move _27, \"attempt to shift left by `{}`, which would overflow\", const 1_i32) -> [success: bb59, unwind unreachable] }), is_cleanup: false }","11 -> BasicBlockData { statements: [_23 = Shl(move _24, const 1_i32), _22 = move _23 as usize (IntToInt), _31 = Eq(const 100_u32, const 0_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:169:31: 169:42 (#56), scope: scope[7] }, kind: assert(!move _31, \"attempt to calculate the remainder of `{}` with a divisor of zero\", _18) -> [success: bb60, unwind unreachable] }), is_cleanup: false }","12 -> BasicBlockData { statements: [_30 = Rem(_18, const 100_u32), _32 = const 1_i32 as u32 (IntToInt), _33 = Lt(move _32, const 32_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:169:30: 169:48 (#56), scope: scope[7] }, kind: assert(move _33, \"attempt to shift left by `{}`, which would overflow\", const 1_i32) -> [success: bb61, unwind unreachable] }), is_cleanup: false }","13 -> BasicBlockData { statements: [_29 = Shl(move _30, const 1_i32), _28 = move _29 as usize (IntToInt), _34 = SubWithOverflow(_7, const 4_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:170:21: 170:30 (#56), scope: scope[8] }, kind: assert(!move (_34.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, const 4_usize) -> [success: bb62, unwind unreachable] }), is_cleanup: false }","14 -> BasicBlockData { statements: [_7 = move (_34.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:172:50: 172:65 (#56), scope: scope[8] }, kind: _36 = std::ptr::const_ptr::<impl *const u8>::add(_13, _22) -> [return: bb63, unwind unreachable] }), is_cleanup: false }","15 -> BasicBlockData { statements: [_38 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:172:67: 172:84 (#56), scope: scope[8] }, kind: _37 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _38) -> [return: bb64, unwind unreachable] }), is_cleanup: false }","16 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:172:25: 172:88 (#56), scope: scope[8] }, kind: _35 = std::intrinsics::copy_nonoverlapping::<u8>(move _36, move _37, const 2_usize) -> [return: bb65, unwind unreachable] }), is_cleanup: false }","17 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:173:50: 173:65 (#56), scope: scope[8] }, kind: _40 = std::ptr::const_ptr::<impl *const u8>::add(_13, _28) -> [return: bb66, unwind unreachable] }), is_cleanup: false }","18 -> BasicBlockData { statements: [_43 = _7, _44 = AddWithOverflow(_43, const 2_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:173:79: 173:87 (#56), scope: scope[8] }, kind: assert(!move (_44.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _43, const 2_usize) -> [success: bb67, unwind unreachable] }), is_cleanup: false }","19 -> BasicBlockData { statements: [_42 = move (_44.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:173:67: 173:88 (#56), scope: scope[8] }, kind: _41 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _42) -> [return: bb68, unwind unreachable] }), is_cleanup: false }","20 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:173:25: 173:92 (#56), scope: scope[8] }, kind: _39 = std::intrinsics::copy_nonoverlapping::<u8>(move _40, move _41, const 2_usize) -> [return: bb69, unwind unreachable] }), is_cleanup: false }","21 -> BasicBlockData { statements: [_46 = _4, _45 = Ge(move _46, const 100_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:178:20: 178:28 (#56), scope: scope[5] }, kind: switchInt(move _45) -> [0: bb29, otherwise: bb22] }), is_cleanup: false }","22 -> BasicBlockData { statements: [_50 = _4, _51 = Eq(const 100_u32, const 0_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:179:31: 179:40 (#56), scope: scope[5] }, kind: assert(!move _51, \"attempt to calculate the remainder of `{}` with a divisor of zero\", _50) -> [success: bb70, unwind unreachable] }), is_cleanup: false }","23 -> BasicBlockData { statements: [_49 = Rem(move _50, const 100_u32), _52 = const 1_i32 as u32 (IntToInt), _53 = Lt(move _52, const 32_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:179:30: 179:46 (#56), scope: scope[5] }, kind: assert(move _53, \"attempt to shift left by `{}`, which would overflow\", const 1_i32) -> [success: bb71, unwind unreachable] }), is_cleanup: false }","24 -> BasicBlockData { statements: [_48 = Shl(move _49, const 1_i32), _47 = move _48 as usize (IntToInt), _54 = Eq(const 100_u32, const 0_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:180:21: 180:29 (#56), scope: scope[9] }, kind: assert(!move _54, \"attempt to divide `{}` by zero\", _4) -> [success: bb72, unwind unreachable] }), is_cleanup: false }","25 -> BasicBlockData { statements: [_4 = Div(_4, const 100_u32), _55 = SubWithOverflow(_7, const 2_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:181:21: 181:30 (#56), scope: scope[9] }, kind: assert(!move (_55.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, const 2_usize) -> [success: bb73, unwind unreachable] }), is_cleanup: false }","26 -> BasicBlockData { statements: [_7 = move (_55.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:183:50: 183:65 (#56), scope: scope[9] }, kind: _57 = std::ptr::const_ptr::<impl *const u8>::add(_13, _47) -> [return: bb74, unwind unreachable] }), is_cleanup: false }","27 -> BasicBlockData { statements: [_59 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:183:67: 183:84 (#56), scope: scope[9] }, kind: _58 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _59) -> [return: bb75, unwind unreachable] }), is_cleanup: false }","28 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:183:25: 183:88 (#56), scope: scope[9] }, kind: _56 = std::intrinsics::copy_nonoverlapping::<u8>(move _57, move _58, const 2_usize) -> [return: bb76, unwind unreachable] }), is_cleanup: false }","29 -> BasicBlockData { statements: [_61 = _4, _60 = Lt(move _61, const 10_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:188:20: 188:26 (#56), scope: scope[5] }, kind: switchInt(move _60) -> [0: bb34, otherwise: bb30] }), is_cleanup: false }","30 -> BasicBlockData { statements: [_62 = SubWithOverflow(_7, const 1_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:189:21: 189:30 (#56), scope: scope[5] }, kind: assert(!move (_62.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, const 1_usize) -> [success: bb77, unwind unreachable] }), is_cleanup: false }","31 -> BasicBlockData { statements: [_7 = move (_62.0: usize), _64 = _4, _63 = move _64 as u8 (IntToInt), _65 = AddWithOverflow(_63, const 48_u8)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:191:46: 191:62 (#56), scope: scope[5] }, kind: assert(!move (_65.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _63, const 48_u8) -> [success: bb78, unwind unreachable] }), is_cleanup: false }","32 -> BasicBlockData { statements: [_67 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:191:26: 191:43 (#56), scope: scope[5] }, kind: _66 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _67) -> [return: bb79, unwind unreachable] }), is_cleanup: false }","33 -> BasicBlockData { statements: [(*_66) = move (_65.0: u8)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:188:17: 199:18 (#56), scope: scope[5] }, kind: goto -> bb80 }), is_cleanup: false }","34 -> BasicBlockData { statements: [_70 = _4, _71 = const 1_i32 as u32 (IntToInt), _72 = Lt(move _71, const 32_u32)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:194:30: 194:38 (#56), scope: scope[5] }, kind: assert(move _72, \"attempt to shift left by `{}`, which would overflow\", const 1_i32) -> [success: bb81, unwind unreachable] }), is_cleanup: false }","35 -> BasicBlockData { statements: [_69 = Shl(move _70, const 1_i32), _68 = move _69 as usize (IntToInt), _73 = SubWithOverflow(_7, const 2_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:195:21: 195:30 (#56), scope: scope[10] }, kind: assert(!move (_73.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, const 2_usize) -> [success: bb82, unwind unreachable] }), is_cleanup: false }","36 -> BasicBlockData { statements: [_7 = move (_73.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:197:50: 197:65 (#56), scope: scope[10] }, kind: _75 = std::ptr::const_ptr::<impl *const u8>::add(_13, _68) -> [return: bb83, unwind unreachable] }), is_cleanup: false }","37 -> BasicBlockData { statements: [_77 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:197:67: 197:84 (#56), scope: scope[10] }, kind: _76 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _77) -> [return: bb84, unwind unreachable] }), is_cleanup: false }","38 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:197:25: 197:88 (#56), scope: scope[10] }, kind: _74 = std::intrinsics::copy_nonoverlapping::<u8>(move _75, move _76, const 2_usize) -> [return: bb85, unwind unreachable] }), is_cleanup: false }","39 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:201:21: 201:35 (#56), scope: scope[5] }, kind: switchInt(_3) -> [0: bb86, otherwise: bb88] }), is_cleanup: false }","40 -> BasicBlockData { statements: [_78 = SubWithOverflow(_7, const 1_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:202:21: 202:30 (#56), scope: scope[5] }, kind: assert(!move (_78.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, const 1_usize) -> [success: bb90, unwind unreachable] }), is_cleanup: false }","41 -> BasicBlockData { statements: [_7 = move (_78.0: usize), _80 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:204:26: 204:43 (#56), scope: scope[5] }, kind: _79 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _80) -> [return: bb91, unwind unreachable] }), is_cleanup: false }","42 -> BasicBlockData { statements: [(*_79) = const 45_u8], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:201:17: 206:18 (#56), scope: scope[5] }, kind: goto -> bb92 }), is_cleanup: false }","43 -> BasicBlockData { statements: [_84 = &(*_2), _83 = move _84 as &[std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize)), _82 = PtrMetadata(move _83), _85 = _7, _86 = SubWithOverflow(_82, _85)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:208:27: 208:43 (#56), scope: scope[5] }, kind: assert(!move (_86.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _82, move _85) -> [success: bb93, unwind unreachable] }), is_cleanup: false }","44 -> BasicBlockData { statements: [_81 = move (_86.0: usize), _90 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:209:60: 209:77 (#56), scope: scope[11] }, kind: _89 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _90) -> [return: bb94, unwind unreachable] }), is_cleanup: false }","45 -> BasicBlockData { statements: [_88 = move _89 as *const u8 (PtrToPtr)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:209:38: 209:83 (#56), scope: scope[11] }, kind: _87 = std::slice::from_raw_parts::<'_, u8>(move _88, _81) -> [return: bb95, unwind unreachable] }), is_cleanup: false }","46 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:210:26: 210:57 (#56), scope: scope[12] }, kind: _0 = std::str::from_utf8_unchecked(_87) -> [return: bb96, unwind unreachable] }), is_cleanup: false }","47 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:211:14: 211:14 (#56), scope: scope[0] }, kind: return }), is_cleanup: false }","48 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _91 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 2_usize) -> [return: bb49, unwind continue] }), is_cleanup: false }","49 -> BasicBlockData { statements: [discriminant(_92) = 14, _93 = move _1 as f64 (Transmute), _94 = const 0_u16 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _95 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 1_usize, move _93, move _94, move _92, const false) -> [return: bb3, unwind continue] }), is_cleanup: false }","50 -> BasicBlockData { statements: [discriminant(_96) = 14, _97 = move _1 as f64 (Transmute), _98 = const 0_u16 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _99 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 2_usize, move _97, move _98, move _96, const true) -> [return: bb51, unwind continue] }), is_cleanup: false }","51 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _100 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 1_usize) -> [return: bb2, unwind continue] }), is_cleanup: false }","52 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _101 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 3_usize) -> [return: bb4, unwind continue] }), is_cleanup: false }","53 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _102 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 3_usize) -> [return: bb4, unwind continue] }), is_cleanup: false }","54 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _103 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 4_usize) -> [return: bb5, unwind continue] }), is_cleanup: false }","55 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _104 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 5_usize) -> [return: bb6, unwind continue] }), is_cleanup: false }","56 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _105 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 7_usize) -> [return: bb8, unwind continue] }), is_cleanup: false }","57 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _106 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 8_usize) -> [return: bb9, unwind continue] }), is_cleanup: false }","58 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _107 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 9_usize) -> [return: bb10, unwind continue] }), is_cleanup: false }","59 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _108 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 10_usize) -> [return: bb11, unwind continue] }), is_cleanup: false }","60 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _109 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 11_usize) -> [return: bb12, unwind continue] }), is_cleanup: false }","61 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _110 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 12_usize) -> [return: bb13, unwind continue] }), is_cleanup: false }","62 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _111 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 13_usize) -> [return: bb14, unwind continue] }), is_cleanup: false }","63 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _112 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 14_usize) -> [return: bb15, unwind continue] }), is_cleanup: false }","64 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _113 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 15_usize) -> [return: bb16, unwind continue] }), is_cleanup: false }","65 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _114 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 16_usize) -> [return: bb17, unwind continue] }), is_cleanup: false }","66 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _115 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 17_usize) -> [return: bb18, unwind continue] }), is_cleanup: false }","67 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _116 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 18_usize) -> [return: bb19, unwind continue] }), is_cleanup: false }","68 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _117 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 19_usize) -> [return: bb20, unwind continue] }), is_cleanup: false }","69 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _118 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 5_usize) -> [return: bb6, unwind continue] }), is_cleanup: false }","70 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _119 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 22_usize) -> [return: bb23, unwind continue] }), is_cleanup: false }","71 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _120 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 23_usize) -> [return: bb24, unwind continue] }), is_cleanup: false }","72 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _121 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 24_usize) -> [return: bb25, unwind continue] }), is_cleanup: false }","73 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _122 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 25_usize) -> [return: bb26, unwind continue] }), is_cleanup: false }","74 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _123 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 26_usize) -> [return: bb27, unwind continue] }), is_cleanup: false }","75 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _124 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 27_usize) -> [return: bb28, unwind continue] }), is_cleanup: false }","76 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _125 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 28_usize) -> [return: bb29, unwind continue] }), is_cleanup: false }","77 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _126 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 30_usize) -> [return: bb31, unwind continue] }), is_cleanup: false }","78 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _127 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 31_usize) -> [return: bb32, unwind continue] }), is_cleanup: false }","79 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _128 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 32_usize) -> [return: bb33, unwind continue] }), is_cleanup: false }","80 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _129 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 38_usize) -> [return: bb39, unwind continue] }), is_cleanup: false }","81 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _130 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 34_usize) -> [return: bb35, unwind continue] }), is_cleanup: false }","82 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _131 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 35_usize) -> [return: bb36, unwind continue] }), is_cleanup: false }","83 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _132 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 36_usize) -> [return: bb37, unwind continue] }), is_cleanup: false }","84 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _133 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 37_usize) -> [return: bb38, unwind continue] }), is_cleanup: false }","85 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _134 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 38_usize) -> [return: bb39, unwind continue] }), is_cleanup: false }","86 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _135 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 39_usize) -> [return: bb87, unwind continue] }), is_cleanup: false }","87 -> BasicBlockData { statements: [discriminant(_136) = 14, _137 = move _1 as f64 (Transmute), _138 = const 0_u16 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _139 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 42_usize, move _137, move _138, move _136, const false) -> [return: bb40, unwind continue] }), is_cleanup: false }","88 -> BasicBlockData { statements: [discriminant(_140) = 14, _141 = move _1 as f64 (Transmute), _142 = const 0_u16 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _143 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 39_usize, move _141, move _142, move _140, const true) -> [return: bb89, unwind continue] }), is_cleanup: false }","89 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _144 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 42_usize) -> [return: bb43, unwind continue] }), is_cleanup: false }","90 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _145 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 40_usize) -> [return: bb41, unwind continue] }), is_cleanup: false }","91 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _146 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 41_usize) -> [return: bb42, unwind continue] }), is_cleanup: false }","92 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _147 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 42_usize) -> [return: bb43, unwind continue] }), is_cleanup: false }","93 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _148 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 43_usize) -> [return: bb44, unwind continue] }), is_cleanup: false }","94 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _149 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 44_usize) -> [return: bb45, unwind continue] }), is_cleanup: false }","95 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _150 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 45_usize) -> [return: bb46, unwind continue] }), is_cleanup: false }","96 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _151 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for u16>__write\", const 46_usize) -> [return: bb47, unwind continue] }), is_cleanup: false }"]}