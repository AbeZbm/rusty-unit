{"global_id":"<impl private__Sealed for i128>__write","cdg":"{\"nodes\":[42069,0,2,1,10,11,12,13,14,15,16,17,18,19,20,21,30,31,32,33,22,23,24,25,26,27,28,29,3,4,5,6,7,8,9,34,35,36,37,38],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[4,5,1],[4,6,1],[4,7,1],[4,8,1],[4,9,1],[4,10,1],[4,11,1],[4,12,1],[4,13,1],[4,14,1],[4,15,1],[16,17,1],[16,18,1],[16,19,1],[15,20,1],[15,21,1],[15,22,1],[15,23,1],[15,24,1],[15,25,1],[15,26,1],[15,27,1],[0,1,1],[0,28,1],[0,29,1],[0,30,1],[0,31,1],[0,32,1],[0,33,1],[0,34,1],[0,4,1],[0,16,1],[0,35,1],[0,36,1],[0,37,1],[0,38,1],[0,39,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"2\" ]\n    3 [ label = \"1\" ]\n    4 [ label = \"10\" ]\n    5 [ label = \"11\" ]\n    6 [ label = \"12\" ]\n    7 [ label = \"13\" ]\n    8 [ label = \"14\" ]\n    9 [ label = \"15\" ]\n    10 [ label = \"16\" ]\n    11 [ label = \"17\" ]\n    12 [ label = \"18\" ]\n    13 [ label = \"19\" ]\n    14 [ label = \"20\" ]\n    15 [ label = \"21\" ]\n    16 [ label = \"30\" ]\n    17 [ label = \"31\" ]\n    18 [ label = \"32\" ]\n    19 [ label = \"33\" ]\n    20 [ label = \"22\" ]\n    21 [ label = \"23\" ]\n    22 [ label = \"24\" ]\n    23 [ label = \"25\" ]\n    24 [ label = \"26\" ]\n    25 [ label = \"27\" ]\n    26 [ label = \"28\" ]\n    27 [ label = \"29\" ]\n    28 [ label = \"3\" ]\n    29 [ label = \"4\" ]\n    30 [ label = \"5\" ]\n    31 [ label = \"6\" ]\n    32 [ label = \"7\" ]\n    33 [ label = \"8\" ]\n    34 [ label = \"9\" ]\n    35 [ label = \"34\" ]\n    36 [ label = \"35\" ]\n    37 [ label = \"36\" ]\n    38 [ label = \"37\" ]\n    39 [ label = \"38\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    4 -> 5 [ label = \"1\" ]\n    4 -> 6 [ label = \"1\" ]\n    4 -> 7 [ label = \"1\" ]\n    4 -> 8 [ label = \"1\" ]\n    4 -> 9 [ label = \"1\" ]\n    4 -> 10 [ label = \"1\" ]\n    4 -> 11 [ label = \"1\" ]\n    4 -> 12 [ label = \"1\" ]\n    4 -> 13 [ label = \"1\" ]\n    4 -> 14 [ label = \"1\" ]\n    4 -> 15 [ label = \"1\" ]\n    16 -> 17 [ label = \"1\" ]\n    16 -> 18 [ label = \"1\" ]\n    16 -> 19 [ label = \"1\" ]\n    15 -> 20 [ label = \"1\" ]\n    15 -> 21 [ label = \"1\" ]\n    15 -> 22 [ label = \"1\" ]\n    15 -> 23 [ label = \"1\" ]\n    15 -> 24 [ label = \"1\" ]\n    15 -> 25 [ label = \"1\" ]\n    15 -> 26 [ label = \"1\" ]\n    15 -> 27 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 28 [ label = \"1\" ]\n    0 -> 29 [ label = \"1\" ]\n    0 -> 30 [ label = \"1\" ]\n    0 -> 31 [ label = \"1\" ]\n    0 -> 32 [ label = \"1\" ]\n    0 -> 33 [ label = \"1\" ]\n    0 -> 34 [ label = \"1\" ]\n    0 -> 4 [ label = \"1\" ]\n    0 -> 16 [ label = \"1\" ]\n    0 -> 35 [ label = \"1\" ]\n    0 -> 36 [ label = \"1\" ]\n    0 -> 37 [ label = \"1\" ]\n    0 -> 38 [ label = \"1\" ]\n    0 -> 39 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"","truncated_cfg":"","constant_pool":[],"branches":0,"assertions":0,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} str, user_ty: None, source_info: SourceInfo { span: src/lib.rs:264:70: 264:74 (#67), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Clear, ty: i128, user_ty: None, source_info: SourceInfo { span: src/lib.rs:264:22: 264:26 (#67), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>; 40_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:264:28: 264:31 (#67), scope: scope[0] } }","_3 -> LocalDecl { mutability: Not, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:265:21: 265:35 (#67), scope: scope[0] } }","_4 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/lib.rs:266:21: 266:22 (#67), scope: scope[1] } }","_5 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/lib.rs:270:21: 270:38 (#67), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/lib.rs:270:23: 270:37 (#67), scope: scope[0] } }","_7 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:272:21: 272:29 (#67), scope: scope[2] } }","_8 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:272:32: 272:35 (#67), scope: scope[0] } }","_9 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>; 40_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:272:32: 272:35 (#67), scope: scope[0] } }","_10 -> LocalDecl { mutability: Not, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:273:21: 273:28 (#67), scope: scope[3] } }","_11 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut std::mem::MaybeUninit<u8>, user_ty: None, source_info: SourceInfo { span: src/lib.rs:273:31: 273:47 (#67), scope: scope[0] } }","_12 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:273:31: 273:34 (#67), scope: scope[0] } }","_13 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/lib.rs:276:22: 276:23 (#67), scope: scope[4] } }","_14 -> LocalDecl { mutability: Not, local_info: Clear, ty: u64, user_ty: None, source_info: SourceInfo { span: src/lib.rs:276:25: 276:28 (#67), scope: scope[4] } }","_15 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, u64), user_ty: None, source_info: SourceInfo { span: src/lib.rs:276:32: 276:56 (#67), scope: scope[0] } }","_16 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/lib.rs:276:54: 276:55 (#67), scope: scope[0] } }","_17 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut [std::mem::MaybeUninit<u8>; 20_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:278:21: 278:101 (#67), scope: scope[0] } }","_18 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:278:21: 278:57 (#67), scope: scope[0] } }","_19 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:278:33: 278:56 (#67), scope: scope[0] } }","_20 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:278:33: 278:37 (#67), scope: scope[0] } }","_21 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:278:33: 278:56 (#67), scope: scope[0] } }","_22 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:280:25: 280:63 (#67), scope: scope[0] } }","_23 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} str, user_ty: None, source_info: SourceInfo { span: src/lib.rs:280:25: 280:57 (#67), scope: scope[0] } }","_24 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>; 20_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:280:44: 280:54 (#67), scope: scope[0] } }","_25 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:280:17: 280:63 (#67), scope: scope[0] } }","_26 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:284:25: 284:31 (#67), scope: scope[6] } }","_27 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:284:34: 284:43 (#67), scope: scope[0] } }","_28 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:284:34: 284:37 (#67), scope: scope[0] } }","_29 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>; 40_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:284:34: 284:37 (#67), scope: scope[0] } }","_30 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:284:34: 284:48 (#67), scope: scope[0] } }","_31 -> LocalDecl { mutability: Not, local_info: Clear, ty: (), user_ty: None, source_info: SourceInfo { span: src/lib.rs:286:25: 286:83 (#67), scope: scope[0] } }","_32 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:286:42: 286:61 (#67), scope: scope[0] } }","_33 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:286:69: 286:82 (#67), scope: scope[0] } }","_34 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:286:69: 286:73 (#67), scope: scope[0] } }","_35 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:286:69: 286:82 (#67), scope: scope[0] } }","_36 -> LocalDecl { mutability: Not, local_info: Clear, ty: u128, user_ty: None, source_info: SourceInfo { span: src/lib.rs:291:26: 291:27 (#67), scope: scope[7] } }","_37 -> LocalDecl { mutability: Not, local_info: Clear, ty: u64, user_ty: None, source_info: SourceInfo { span: src/lib.rs:291:29: 291:32 (#67), scope: scope[7] } }","_38 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u128, u64), user_ty: None, source_info: SourceInfo { span: src/lib.rs:291:36: 291:60 (#67), scope: scope[0] } }","_39 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut [std::mem::MaybeUninit<u8>; 20_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:293:25: 294:72 (#67), scope: scope[0] } }","_40 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:293:25: 293:61 (#67), scope: scope[0] } }","_41 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:293:37: 293:60 (#67), scope: scope[0] } }","_42 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:293:37: 293:41 (#67), scope: scope[0] } }","_43 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:293:37: 293:60 (#67), scope: scope[0] } }","_44 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:296:29: 296:67 (#67), scope: scope[0] } }","_45 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} str, user_ty: None, source_info: SourceInfo { span: src/lib.rs:296:29: 296:61 (#67), scope: scope[0] } }","_46 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>; 20_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:296:48: 296:58 (#67), scope: scope[0] } }","_47 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:296:21: 296:67 (#67), scope: scope[0] } }","_48 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:300:29: 300:35 (#67), scope: scope[9] } }","_49 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:300:38: 300:47 (#67), scope: scope[0] } }","_50 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:300:38: 300:41 (#67), scope: scope[0] } }","_51 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>; 40_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:300:38: 300:41 (#67), scope: scope[0] } }","_52 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:300:38: 300:52 (#67), scope: scope[0] } }","_53 -> LocalDecl { mutability: Not, local_info: Clear, ty: (), user_ty: None, source_info: SourceInfo { span: src/lib.rs:302:29: 302:87 (#67), scope: scope[0] } }","_54 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:302:46: 302:65 (#67), scope: scope[0] } }","_55 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:302:73: 302:86 (#67), scope: scope[0] } }","_56 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:302:73: 302:77 (#67), scope: scope[0] } }","_57 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:302:73: 302:86 (#67), scope: scope[0] } }","_58 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:308:25: 308:34 (#67), scope: scope[0] } }","_59 -> LocalDecl { mutability: Mut, local_info: Clear, ty: u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:310:50: 310:59 (#67), scope: scope[0] } }","_60 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (u8, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:310:50: 310:66 (#67), scope: scope[0] } }","_61 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:310:30: 310:47 (#67), scope: scope[0] } }","_62 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:310:42: 310:46 (#67), scope: scope[0] } }","_63 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:316:21: 316:30 (#67), scope: scope[0] } }","_64 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:318:26: 318:43 (#67), scope: scope[0] } }","_65 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:318:38: 318:42 (#67), scope: scope[0] } }","_66 -> LocalDecl { mutability: Not, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:322:21: 322:24 (#67), scope: scope[6] } }","_67 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:322:27: 322:36 (#67), scope: scope[0] } }","_68 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>], user_ty: None, source_info: SourceInfo { span: src/lib.rs:322:27: 322:30 (#67), scope: scope[0] } }","_69 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} [std::mem::MaybeUninit<u8>; 40_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:322:27: 322:30 (#67), scope: scope[0] } }","_70 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:322:39: 322:43 (#67), scope: scope[0] } }","_71 -> LocalDecl { mutability: Mut, local_info: Clear, ty: (usize, bool), user_ty: None, source_info: SourceInfo { span: src/lib.rs:322:27: 322:43 (#67), scope: scope[0] } }","_72 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} [u8], user_ty: None, source_info: SourceInfo { span: src/lib.rs:323:21: 323:26 (#67), scope: scope[11] } }","_73 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *const u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:323:60: 323:77 (#67), scope: scope[0] } }","_74 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut u8, user_ty: None, source_info: SourceInfo { span: src/lib.rs:323:60: 323:77 (#67), scope: scope[0] } }","_75 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:323:72: 323:76 (#67), scope: scope[0] } }","_76 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_77 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_78 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_79 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_80 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_81 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_82 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_83 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_84 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_85 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_86 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_87 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_88 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_89 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_90 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_91 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_92 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_93 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_94 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_95 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_96 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_97 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_98 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_99 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_100 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_101 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_102 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_103 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_104 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_105 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_106 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_107 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_108 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_109 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_110 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_111 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_112 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_113 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_114 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_115 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_116 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_117 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_118 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: rusty_monitor::BinaryOp, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_119 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_120 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: i128, user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_121 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_122 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_123 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_124 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_125 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_126 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_127 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_128 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_129 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_130 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _130 = <ZST>: for<'a> fn(u64, &'a str) {rusty_monitor::trace_entry}(const 0_usize, const \"<impl private__Sealed for i128>__write\") -> [return: bb1, unwind continue] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_3 = Ge(_1, const 0_i128)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:266:28: 266:42 (#67), scope: scope[1] }, kind: switchInt(_3) -> [0: bb40, otherwise: bb42] }), is_cleanup: false }","2 -> BasicBlockData { statements: [_4 = _1 as u128 (IntToInt)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:266:25: 271:18 (#67), scope: scope[1] }, kind: goto -> bb44 }), is_cleanup: false }","3 -> BasicBlockData { statements: [_6 = _1 as u128 (IntToInt), _5 = Not(move _6)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:270:21: 270:54 (#67), scope: scope[1] }, kind: _4 = core::num::<impl u128>::wrapping_add(move _5, const 1_u128) -> [return: bb45, unwind unreachable] }), is_cleanup: false }","4 -> BasicBlockData { statements: [_9 = &(*_2), _8 = move _9 as &[std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize)), _7 = PtrMetadata(move _8), _12 = _2 as &mut [std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize))], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:273:31: 273:47 (#67), scope: scope[3] }, kind: _11 = core::slice::<impl [std::mem::MaybeUninit<u8>]>::as_mut_ptr(move _12) -> [return: bb46, unwind unreachable] }), is_cleanup: false }","5 -> BasicBlockData { statements: [_10 = move _11 as *mut u8 (PtrToPtr), _16 = _4], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:276:32: 276:56 (#67), scope: scope[4] }, kind: _15 = udiv128::udivmod_1e19(move _16) -> [return: bb47, unwind unreachable] }), is_cleanup: false }","6 -> BasicBlockData { statements: [_13 = (_15.0: u128), _14 = (_15.1: u64), _20 = _7, _21 = SubWithOverflow(_20, const <u64 as Integer>::MAX_STR_LEN)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:278:33: 278:56 (#67), scope: scope[5] }, kind: assert(!move (_21.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _20, const <u64 as Integer>::MAX_STR_LEN) -> [success: bb48, unwind unreachable] }), is_cleanup: false }","7 -> BasicBlockData { statements: [_19 = move (_21.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:278:21: 278:57 (#67), scope: scope[5] }, kind: _18 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _19) -> [return: bb49, unwind unreachable] }), is_cleanup: false }","8 -> BasicBlockData { statements: [_17 = move _18 as *mut [std::mem::MaybeUninit<u8>; 20] (PtrToPtr), _24 = &mut (*_17)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:280:25: 280:57 (#67), scope: scope[6] }, kind: _23 = <u64 as private::Sealed>::write(_14, _24) -> [return: bb50, unwind unreachable] }), is_cleanup: false }","9 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:280:25: 280:63 (#67), scope: scope[6] }, kind: _22 = core::str::<impl str>::len(_23) -> [return: bb51, unwind unreachable] }), is_cleanup: false }","10 -> BasicBlockData { statements: [_25 = SubWithOverflow(_7, _22)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:280:17: 280:63 (#67), scope: scope[6] }, kind: assert(!move (_25.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, move _22) -> [success: bb52, unwind unreachable] }), is_cleanup: false }","11 -> BasicBlockData { statements: [_7 = move (_25.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:282:20: 282:26 (#67), scope: scope[6] }, kind: switchInt(_13) -> [0: bb31, otherwise: bb12] }), is_cleanup: false }","12 -> BasicBlockData { statements: [_29 = &(*_2), _28 = move _29 as &[std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize)), _27 = PtrMetadata(move _28), _30 = SubWithOverflow(_27, const 19_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:284:34: 284:48 (#67), scope: scope[6] }, kind: assert(!move (_30.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _27, const 19_usize) -> [success: bb53, unwind unreachable] }), is_cleanup: false }","13 -> BasicBlockData { statements: [_26 = move (_30.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:286:42: 286:61 (#67), scope: scope[7] }, kind: _32 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, _26) -> [return: bb54, unwind unreachable] }), is_cleanup: false }","14 -> BasicBlockData { statements: [_34 = _7, _35 = SubWithOverflow(_34, _26)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:286:69: 286:82 (#67), scope: scope[7] }, kind: assert(!move (_35.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _34, _26) -> [success: bb55, unwind unreachable] }), is_cleanup: false }","15 -> BasicBlockData { statements: [_33 = move (_35.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:286:25: 286:83 (#67), scope: scope[7] }, kind: _31 = std::intrinsics::write_bytes::<u8>(move _32, const 48_u8, move _33) -> [return: bb56, unwind unreachable] }), is_cleanup: false }","16 -> BasicBlockData { statements: [_7 = _26], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:291:36: 291:60 (#67), scope: scope[7] }, kind: _38 = udiv128::udivmod_1e19(_13) -> [return: bb57, unwind unreachable] }), is_cleanup: false }","17 -> BasicBlockData { statements: [_36 = (_38.0: u128), _37 = (_38.1: u64), _42 = _7, _43 = SubWithOverflow(_42, const <u64 as Integer>::MAX_STR_LEN)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:293:37: 293:60 (#67), scope: scope[8] }, kind: assert(!move (_43.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _42, const <u64 as Integer>::MAX_STR_LEN) -> [success: bb58, unwind unreachable] }), is_cleanup: false }","18 -> BasicBlockData { statements: [_41 = move (_43.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:293:25: 293:61 (#67), scope: scope[8] }, kind: _40 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _41) -> [return: bb59, unwind unreachable] }), is_cleanup: false }","19 -> BasicBlockData { statements: [_39 = move _40 as *mut [std::mem::MaybeUninit<u8>; 20] (PtrToPtr), _46 = &mut (*_39)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:296:29: 296:61 (#67), scope: scope[9] }, kind: _45 = <u64 as private::Sealed>::write(_37, _46) -> [return: bb60, unwind unreachable] }), is_cleanup: false }","20 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:296:29: 296:67 (#67), scope: scope[9] }, kind: _44 = core::str::<impl str>::len(_45) -> [return: bb61, unwind unreachable] }), is_cleanup: false }","21 -> BasicBlockData { statements: [_47 = SubWithOverflow(_7, _44)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:296:21: 296:67 (#67), scope: scope[9] }, kind: assert(!move (_47.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, move _44) -> [success: bb62, unwind unreachable] }), is_cleanup: false }","22 -> BasicBlockData { statements: [_7 = move (_47.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:298:24: 298:30 (#67), scope: scope[9] }, kind: switchInt(_36) -> [0: bb31, otherwise: bb23] }), is_cleanup: false }","23 -> BasicBlockData { statements: [_51 = &(*_2), _50 = move _51 as &[std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize)), _49 = PtrMetadata(move _50), _52 = SubWithOverflow(_49, const 38_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:300:38: 300:52 (#67), scope: scope[9] }, kind: assert(!move (_52.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _49, const 38_usize) -> [success: bb63, unwind unreachable] }), is_cleanup: false }","24 -> BasicBlockData { statements: [_48 = move (_52.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:302:46: 302:65 (#67), scope: scope[10] }, kind: _54 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, _48) -> [return: bb64, unwind unreachable] }), is_cleanup: false }","25 -> BasicBlockData { statements: [_56 = _7, _57 = SubWithOverflow(_56, _48)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:302:73: 302:86 (#67), scope: scope[10] }, kind: assert(!move (_57.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _56, _48) -> [success: bb65, unwind unreachable] }), is_cleanup: false }","26 -> BasicBlockData { statements: [_55 = move (_57.0: usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:302:29: 302:87 (#67), scope: scope[10] }, kind: _53 = std::intrinsics::write_bytes::<u8>(move _54, const 48_u8, move _55) -> [return: bb66, unwind unreachable] }), is_cleanup: false }","27 -> BasicBlockData { statements: [_7 = _48, _58 = SubWithOverflow(_7, const 1_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:308:25: 308:34 (#67), scope: scope[10] }, kind: assert(!move (_58.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, const 1_usize) -> [success: bb67, unwind unreachable] }), is_cleanup: false }","28 -> BasicBlockData { statements: [_7 = move (_58.0: usize), _59 = _36 as u8 (IntToInt), _60 = AddWithOverflow(_59, const 48_u8)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:310:50: 310:66 (#67), scope: scope[10] }, kind: assert(!move (_60.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _59, const 48_u8) -> [success: bb68, unwind unreachable] }), is_cleanup: false }","29 -> BasicBlockData { statements: [_62 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:310:30: 310:47 (#67), scope: scope[10] }, kind: _61 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _62) -> [return: bb69, unwind unreachable] }), is_cleanup: false }","30 -> BasicBlockData { statements: [(*_61) = move (_60.0: u8)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:298:21: 312:22 (#67), scope: scope[9] }, kind: goto -> bb70 }), is_cleanup: false }","31 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:315:21: 315:35 (#67), scope: scope[6] }, kind: switchInt(_3) -> [0: bb71, otherwise: bb73] }), is_cleanup: false }","32 -> BasicBlockData { statements: [_63 = SubWithOverflow(_7, const 1_usize)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:316:21: 316:30 (#67), scope: scope[6] }, kind: assert(!move (_63.1: bool), \"attempt to compute `{} - {}`, which would overflow\", _7, const 1_usize) -> [success: bb75, unwind unreachable] }), is_cleanup: false }","33 -> BasicBlockData { statements: [_7 = move (_63.0: usize), _65 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:318:26: 318:43 (#67), scope: scope[6] }, kind: _64 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _65) -> [return: bb76, unwind unreachable] }), is_cleanup: false }","34 -> BasicBlockData { statements: [(*_64) = const 45_u8], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:315:17: 320:18 (#67), scope: scope[6] }, kind: goto -> bb77 }), is_cleanup: false }","35 -> BasicBlockData { statements: [_69 = &(*_2), _68 = move _69 as &[std::mem::MaybeUninit<u8>] (PointerCoercion(Unsize)), _67 = PtrMetadata(move _68), _70 = _7, _71 = SubWithOverflow(_67, _70)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:322:27: 322:43 (#67), scope: scope[6] }, kind: assert(!move (_71.1: bool), \"attempt to compute `{} - {}`, which would overflow\", move _67, move _70) -> [success: bb78, unwind unreachable] }), is_cleanup: false }","36 -> BasicBlockData { statements: [_66 = move (_71.0: usize), _75 = _7], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:323:60: 323:77 (#67), scope: scope[11] }, kind: _74 = std::ptr::mut_ptr::<impl *mut u8>::add(_10, move _75) -> [return: bb79, unwind unreachable] }), is_cleanup: false }","37 -> BasicBlockData { statements: [_73 = move _74 as *const u8 (PtrToPtr)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:323:38: 323:83 (#67), scope: scope[11] }, kind: _72 = std::slice::from_raw_parts::<'_, u8>(move _73, _66) -> [return: bb80, unwind unreachable] }), is_cleanup: false }","38 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:324:26: 324:57 (#67), scope: scope[12] }, kind: _0 = std::str::from_utf8_unchecked(_72) -> [return: bb81, unwind unreachable] }), is_cleanup: false }","39 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:325:14: 325:14 (#67), scope: scope[0] }, kind: return }), is_cleanup: false }","40 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _76 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 2_usize) -> [return: bb41, unwind continue] }), is_cleanup: false }","41 -> BasicBlockData { statements: [discriminant(_77) = 14, _78 = move _1 as f64 (Transmute), _79 = const 0_i128 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _80 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 1_usize, move _78, move _79, move _77, const false) -> [return: bb3, unwind continue] }), is_cleanup: false }","42 -> BasicBlockData { statements: [discriminant(_81) = 14, _82 = move _1 as f64 (Transmute), _83 = const 0_i128 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _84 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 2_usize, move _82, move _83, move _81, const true) -> [return: bb43, unwind continue] }), is_cleanup: false }","43 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _85 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 1_usize) -> [return: bb2, unwind continue] }), is_cleanup: false }","44 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _86 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 3_usize) -> [return: bb4, unwind continue] }), is_cleanup: false }","45 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _87 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 3_usize) -> [return: bb4, unwind continue] }), is_cleanup: false }","46 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _88 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 4_usize) -> [return: bb5, unwind continue] }), is_cleanup: false }","47 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _89 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 5_usize) -> [return: bb6, unwind continue] }), is_cleanup: false }","48 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _90 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 6_usize) -> [return: bb7, unwind continue] }), is_cleanup: false }","49 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _91 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 7_usize) -> [return: bb8, unwind continue] }), is_cleanup: false }","50 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _92 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 8_usize) -> [return: bb9, unwind continue] }), is_cleanup: false }","51 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _93 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 9_usize) -> [return: bb10, unwind continue] }), is_cleanup: false }","52 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _94 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 10_usize) -> [return: bb11, unwind continue] }), is_cleanup: false }","53 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _95 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 12_usize) -> [return: bb13, unwind continue] }), is_cleanup: false }","54 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _96 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 13_usize) -> [return: bb14, unwind continue] }), is_cleanup: false }","55 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _97 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 14_usize) -> [return: bb15, unwind continue] }), is_cleanup: false }","56 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _98 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 15_usize) -> [return: bb16, unwind continue] }), is_cleanup: false }","57 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _99 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 16_usize) -> [return: bb17, unwind continue] }), is_cleanup: false }","58 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _100 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 17_usize) -> [return: bb18, unwind continue] }), is_cleanup: false }","59 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _101 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 18_usize) -> [return: bb19, unwind continue] }), is_cleanup: false }","60 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _102 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 19_usize) -> [return: bb20, unwind continue] }), is_cleanup: false }","61 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _103 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 20_usize) -> [return: bb21, unwind continue] }), is_cleanup: false }","62 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _104 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 21_usize) -> [return: bb22, unwind continue] }), is_cleanup: false }","63 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _105 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 23_usize) -> [return: bb24, unwind continue] }), is_cleanup: false }","64 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _106 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 24_usize) -> [return: bb25, unwind continue] }), is_cleanup: false }","65 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _107 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 25_usize) -> [return: bb26, unwind continue] }), is_cleanup: false }","66 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _108 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 26_usize) -> [return: bb27, unwind continue] }), is_cleanup: false }","67 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _109 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 27_usize) -> [return: bb28, unwind continue] }), is_cleanup: false }","68 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _110 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 28_usize) -> [return: bb29, unwind continue] }), is_cleanup: false }","69 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _111 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 29_usize) -> [return: bb30, unwind continue] }), is_cleanup: false }","70 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _112 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 30_usize) -> [return: bb31, unwind continue] }), is_cleanup: false }","71 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _113 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 31_usize) -> [return: bb72, unwind continue] }), is_cleanup: false }","72 -> BasicBlockData { statements: [discriminant(_114) = 14, _115 = move _1 as f64 (Transmute), _116 = const 0_i128 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _117 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 34_usize, move _115, move _116, move _114, const false) -> [return: bb32, unwind continue] }), is_cleanup: false }","73 -> BasicBlockData { statements: [discriminant(_118) = 14, _119 = move _1 as f64 (Transmute), _120 = const 0_i128 as f64 (Transmute)], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _121 = <ZST>: for<'a> fn(u64, &'a str, u64, f64, f64, rusty_monitor::BinaryOp, bool) {rusty_monitor::trace_branch_bool}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 31_usize, move _119, move _120, move _118, const true) -> [return: bb74, unwind continue] }), is_cleanup: false }","74 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _122 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 34_usize) -> [return: bb35, unwind continue] }), is_cleanup: false }","75 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _123 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 32_usize) -> [return: bb33, unwind continue] }), is_cleanup: false }","76 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _124 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 33_usize) -> [return: bb34, unwind continue] }), is_cleanup: false }","77 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _125 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 34_usize) -> [return: bb35, unwind continue] }), is_cleanup: false }","78 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _126 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 35_usize) -> [return: bb36, unwind continue] }), is_cleanup: false }","79 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _127 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 36_usize) -> [return: bb37, unwind continue] }), is_cleanup: false }","80 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _128 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 37_usize) -> [return: bb38, unwind continue] }), is_cleanup: false }","81 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _129 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for i128>__write\", const 38_usize) -> [return: bb39, unwind continue] }), is_cleanup: false }"]}