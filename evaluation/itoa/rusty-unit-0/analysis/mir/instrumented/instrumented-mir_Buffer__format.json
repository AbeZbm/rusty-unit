{"global_id":"Buffer__format","cdg":"{\"nodes\":[42069,2,4,3,0,1],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[1,2,1],[1,3,1],[0,4,1],[0,5,1],[0,1,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"2\" ]\n    2 [ label = \"4\" ]\n    3 [ label = \"3\" ]\n    4 [ label = \"0\" ]\n    5 [ label = \"1\" ]\n    1 -> 2 [ label = \"1\" ]\n    1 -> 3 [ label = \"1\" ]\n    0 -> 4 [ label = \"1\" ]\n    0 -> 5 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"","truncated_cfg":"","constant_pool":[],"branches":0,"assertions":0,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} str, user_ty: None, source_info: SourceInfo { span: src/lib.rs:99:51: 99:55 (#0), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} mut Buffer, user_ty: None, source_info: SourceInfo { span: src/lib.rs:99:31: 99:40 (#0), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Clear, ty: I/#0, user_ty: None, source_info: SourceInfo { span: src/lib.rs:99:42: 99:43 (#0), scope: scope[0] } }","_3 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:74 ~ itoa[eae4]::private::Sealed::Buffer) }), user_ty: None, source_info: SourceInfo { span: src/lib.rs:101:13: 102:56 (#0), scope: scope[0] } }","_4 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(0:74 ~ itoa[eae4]::private::Sealed::Buffer) }), user_ty: None, source_info: SourceInfo { span: src/lib.rs:101:19: 102:56 (#0), scope: scope[0] } }","_5 -> LocalDecl { mutability: Mut, local_info: Clear, ty: *mut [std::mem::MaybeUninit<u8>; 40_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:101:20: 101:80 (#0), scope: scope[0] } }","_6 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>; 40_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:101:20: 101:35 (#0), scope: scope[0] } }","_7 -> LocalDecl { mutability: Mut, local_info: Clear, ty: bool, user_ty: None, source_info: SourceInfo { span: src/lib.rs:104:12: 104:41 (#0), scope: scope[0] } }","_8 -> LocalDecl { mutability: Mut, local_info: Clear, ty: usize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:104:12: 104:24 (#0), scope: scope[0] } }","_9 -> LocalDecl { mutability: Mut, local_info: Clear, ty: !, user_ty: None, source_info: SourceInfo { span: src/lib.rs:105:22: 105:51 (#0), scope: scope[0] } }","_10 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_11 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_12 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _12 = <ZST>: for<'a> fn(u64, &'a str) {rusty_monitor::trace_entry}(const 0_usize, const \"Buffer__format\") -> [return: bb1, unwind continue] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_6 = &mut ((*_1).0: [std::mem::MaybeUninit<u8>; 40]), _5 = &raw mut (*_6), _4 = _5 as *mut <I as private::Sealed>::Buffer (PtrToPtr), _3 = &mut (*_4)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:100:22: 103:11 (#0), scope: scope[0] }, kind: _0 = <I as private::Sealed>::write(_2, _3) -> [return: bb6, unwind unreachable] }), is_cleanup: false }","2 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:104:12: 104:24 (#0), scope: scope[1] }, kind: _8 = core::str::<impl str>::len(_0) -> [return: bb7, unwind unreachable] }), is_cleanup: false }","3 -> BasicBlockData { statements: [_7 = Gt(move _8, const <I as Integer>::MAX_STR_LEN)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:104:12: 104:41 (#0), scope: scope[1] }, kind: switchInt(move _7) -> [0: bb5, otherwise: bb4] }), is_cleanup: false }","4 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:105:22: 105:51 (#0), scope: scope[1] }, kind: _9 = std::hint::unreachable_unchecked() -> unwind unreachable }), is_cleanup: false }","5 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:108:6: 108:6 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }","6 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _10 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"Buffer__format\", const 1_usize) -> [return: bb2, unwind continue] }), is_cleanup: false }","7 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _11 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"Buffer__format\", const 2_usize) -> [return: bb3, unwind continue] }), is_cleanup: false }"]}