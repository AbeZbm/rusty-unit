{"global_id":"<impl private__Sealed for isize>__write","cdg":"{\"nodes\":[42069,0,1],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[0,1,1],[0,2,1],[0,0,1]]}","cdg_dot":"digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n","cfg":"","truncated_cfg":"","constant_pool":[],"branches":0,"assertions":0,"locals":["_0 -> LocalDecl { mutability: Mut, local_info: Clear, ty: &'{erased} str, user_ty: None, source_info: SourceInfo { span: src/lib.rs:238:55: 238:59 (#65), scope: scope[0] } }","_1 -> LocalDecl { mutability: Not, local_info: Clear, ty: isize, user_ty: None, source_info: SourceInfo { span: src/lib.rs:238:22: 238:26 (#65), scope: scope[0] } }","_2 -> LocalDecl { mutability: Not, local_info: Clear, ty: &'{erased} mut [std::mem::MaybeUninit<u8>; 20_usize], user_ty: None, source_info: SourceInfo { span: src/lib.rs:238:28: 238:31 (#65), scope: scope[0] } }","_3 -> LocalDecl { mutability: Mut, local_info: Clear, ty: i64, user_ty: None, source_info: SourceInfo { span: src/lib.rs:239:17: 239:37 (#65), scope: scope[0] } }","_4 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }","_5 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }"],"basic_blocks":["0 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _5 = <ZST>: for<'a> fn(u64, &'a str) {rusty_monitor::trace_entry}(const 0_usize, const \"<impl private__Sealed for isize>__write\") -> [return: bb1, unwind continue] }), is_cleanup: false }","1 -> BasicBlockData { statements: [_3 = _1 as i64 (IntToInt)], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:239:17: 239:48 (#65), scope: scope[0] }, kind: _0 = <i64 as private::Sealed>::write(move _3, _2) -> [return: bb3, unwind unreachable] }), is_cleanup: false }","2 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:240:14: 240:14 (#65), scope: scope[0] }, kind: return }), is_cleanup: false }","3 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _4 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<impl private__Sealed for isize>__write\", const 1_usize) -> [return: bb2, unwind continue] }), is_cleanup: false }"]}