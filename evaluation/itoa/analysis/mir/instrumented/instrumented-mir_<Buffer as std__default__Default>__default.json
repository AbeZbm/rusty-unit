{
    "global_id": "<Buffer as std__default__Default>__default",
    "cdg": "{\"nodes\":[42069,0,1],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[0,1,1],[0,2,1],[0,0,1]]}",
    "cdg_dot": "digraph {\n    0 [ label = \"42069\" ]\n    1 [ label = \"0\" ]\n    2 [ label = \"1\" ]\n    0 -> 1 [ label = \"1\" ]\n    0 -> 2 [ label = \"1\" ]\n    0 -> 0 [ label = \"1\" ]\n}\n",
    "cfg": "",
    "truncated_cfg": "",
    "constant_pool": [],
    "branches": 0,
    "assertions": 0,
    "locals": [
        "_0 -> LocalDecl { mutability: Mut, local_info: Clear, ty: Buffer, user_ty: None, source_info: SourceInfo { span: src/lib.rs:71:21: 71:27 (#0), scope: scope[0] } }",
        "_1 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }",
        "_2 -> LocalDecl { mutability: Mut, local_info: Set(Boring), ty: (), user_ty: None, source_info: SourceInfo { span: no-location (#0), scope: scope[0] } }"
    ],
    "basic_blocks": [
        "0 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _2 = <ZST>: for<'a> fn(u64, &'a str) {rusty_monitor::trace_entry}(const 0_usize, const \"<Buffer as std__default__Default>__default\") -> [return: bb1, unwind continue] }), is_cleanup: false }",
        "1 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:72:9: 72:22 (#0), scope: scope[0] }, kind: _0 = Buffer::new() -> [return: bb3, unwind unreachable] }), is_cleanup: false }",
        "2 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: src/lib.rs:73:6: 73:6 (#0), scope: scope[0] }, kind: return }), is_cleanup: false }",
        "3 -> BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: no-location (#0), scope: scope[0] }, kind: _1 = <ZST>: for<'a> fn(u64, &'a str, u64) {rusty_monitor::trace_branch_hit}(const 0_usize, const \"<Buffer as std__default__Default>__default\", const 1_usize) -> [return: bb2, unwind continue] }), is_cleanup: false }"
    ]
}